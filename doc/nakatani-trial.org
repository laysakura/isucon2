* 練習 w/ ISUCON2
** 初期状態
*** スコア
    #+BEGIN_SRC sh
    Score:1507727
    Tickets:326
    SoldOut:-
    SoldOutAt:-
    GET:2506
    POST:326
    Errors:-
    Timeouts:-
    Update:09:30:19
    #+END_SRC

*** パフォーマンス気付いた点
    - mysqlもgunicornもCPU使いまくってる
      - gunicornが10ワーカ立てているのが気になる．立て過ぎなのか，リクエストを裁くにはもっといるのか．

** gunicorn 10 workers -> 2 workers
*** スコア
    *down*
    #+BEGIN_SRC sh
Score:1905114
Tickets:258
SoldOut:-
SoldOutAt:-
GET:1994
POST:258
Errors:-
Timeouts:-
Update:09:56:01
    #+END_SRC

*** パフォーマンス気付いた点
    - gunicornはちゃんと1ワーカでCPU60%くらい使うようにはなった
    - *最初の10秒くらい，mysqlが10%くらいCPU使うが，gunicornは何もしてない時間がある．これなんだろ?*

** gunicorn 10 workers -> 15 workers
*** スコア
    *even*
    #+BEGIN_SRC sh
Score:1445644
Tickets:340
SoldOut:-
SoldOutAt:-
GET:2716
POST:340
Errors:-
Timeouts:-
Update:10:00:35
    #+END_SRC

*** パフォーマンス気付いた点

** 「最初の10秒」解明
*** スコア

*** パフォーマンス気付いた点
    - めっちゃiowaitしている
    #+BEGIN_SRC sh
$ sudo sar -u 1
Linux 3.2.0-4-amd64 (gueze)     2013年08月13日  _x86_64_        (2 CPU)

11時45分44秒     CPU     %user     %nice   %system   %iowait    %steal     %idle
11時45分45秒     all      0.00      0.00      0.50      0.00      0.00     99.50
11時45分46秒     all      0.50      0.00      0.00      9.55      0.00     89.95
11時45分47秒     all      0.50      0.00      0.00     47.50      0.00     52.00
11時45分48秒     all      0.99      0.00      0.50     51.98      0.00     46.53
11時45分49秒     all      0.00      0.00      0.50     52.00      0.00     47.50
11時45分50秒     all      1.00      0.00      0.00     55.50      0.00     43.50
11時45分51秒     all      1.51      0.00      0.00     50.25      0.00     48.24
11時45分52秒     all      1.49      0.00      0.50     45.77      0.00     52.24
11時45分53秒     all      1.50      0.00      0.50     48.00      0.00     50.00
11時45分54秒     all      1.49      0.00      0.50     47.76      0.00     50.25
11時45分55秒     all      8.54      0.00      0.50     48.74      0.00     42.21
11時45分56秒     all     15.27      0.00      0.99     37.93      0.00     45.81
11時45分57秒     all      1.99      0.00      1.00     23.38      0.00     73.63
11時45分58秒     all      0.00      0.00      0.00     51.76      0.00     48.24
11時45分59秒     all      1.00      0.00      0.50     49.25      0.00     49.25
11時46分00秒     all      0.50      0.00      0.50     47.00      0.00     52.00
11時46分01秒     all      1.50      0.00      0.00     56.50      0.00     42.00
11時46分02秒     all      2.99      0.00      0.50     46.27      0.00     50.25
11時46分03秒     all      1.99      0.00      1.00     43.78      0.00     53.23
11時46分04秒     all     10.50      0.00      1.00     40.00      0.00     48.50
11時46分05秒     all     67.50      0.00      1.00      1.00      0.00     30.50
11時46分06秒     all     95.00      0.00      5.00      0.00      0.00      0.00
    #+END_SRC

    - しかもblocked write
    #+BEGIN_SRC sh
$ sudo sar -b 1
Linux 3.2.0-4-amd64 (gueze)     2013年08月13日  _x86_64_        (2 CPU)

11時48分20秒       tps      rtps      wtps   bread/s   bwrtn/s
11時48分21秒     21.00      1.00     20.00      8.00    520.00
11時48分22秒     73.00      2.00     71.00     16.00   1472.00
11時48分23秒     74.00      2.00     72.00     16.00   1368.00
11時48分24秒     76.00      2.00     74.00     16.00   1408.00
11時48分25秒     78.00      4.00     74.00     32.00   1752.00
11時48分26秒     79.00      2.00     77.00     16.00   1904.00
11時48分27秒     77.00      2.00     75.00     16.00   2416.00
11時48分28秒     79.00      2.00     77.00     16.00   2312.00
11時48分29秒     76.00      1.00     75.00      8.00  20184.00
11時48分30秒     64.00      2.00     62.00     16.00  10160.00
11時48分31秒     72.00      1.00     71.00      8.00   1088.00
11時48分32秒     40.00      1.00     39.00      8.00    904.00
11時48分33秒     74.00      3.00     71.00     24.00   1536.00
11時48分34秒     72.00      2.00     70.00     16.00   1408.00
11時48分35秒     78.00      5.00     73.00     40.00   1552.00
11時48分36秒     75.00      1.00     74.00      8.00   1816.00
11時48分37秒     76.00      1.00     75.00      8.00   2608.00
11時48分38秒     74.00      1.00     73.00      8.00  18864.00
11時48分39秒     47.00      2.00     45.00     16.00  11912.00
11時48分40秒     24.00      0.00     24.00      0.00    400.00
11時48分41秒     19.00      0.00     19.00      0.00    344.00
    #+END_SRC

    - mysqlが最初にdisk io bottleneckなことやってることが分かった．
    #+BEGIN_SRC sh
$ dstat -M top_bio -al
WARNING: Option -M is deprecated, please use --top_bio instead
.----most-expensive---- ----total-cpu-usage---- -dsk/total- -net/total- ---paging-- ---system-- ---load-avg---
  block i/o process   |usr sys idl wai hiq siq| read  writ| recv  send|  in   out | int   csw | 1m   5m  15m 
mysqld        3B  157B|  0   0  99   0   0   0| 494B   22k|   0     0 |   0     2B|  61    95 |0.01 0.14 0.48
mysqld     8192B  256k|  0   1  82  18   0   0|8192B  484k|1108B 3644B|   0     0 | 169   339 |0.01 0.14 0.48
mysqld     8192B  372k|  1   0  52  46   0   0|8192B  676k| 878B 1352B|   0     0 | 286   565 |0.01 0.14 0.48
mysqld     4096B  360k|  1   1  47  52   0   0|4096B  688k|1728B 2640B|   0     0 | 319   641 |0.01 0.14 0.48
mysqld     4096B  332k|  0   0  43  56   0   0|4096B  636k| 808B 1288B|   0     0 | 294   580 |0.25 0.18 0.49
mysqld       16k  480k|  2   0  49  50   0   0|  16k  776k|1446B 1288B|   0     0 | 342   672 |0.25 0.18 0.49
mysqld     8192B  472k|  2   1  50  48   0   0|8192B  832k|3154B 1580B|   0     0 | 333   599 |0.25 0.18 0.49
mysqld     8192B  696k|  2   0  48  50   0   0|8192B 1076k| 836B 1288B|   0     0 | 299   586 |0.25 0.18 0.49
mysqld     8192B  732k|  2   0  47  52   0   0|8192B 1136k| 672B 1320B|   0     0 | 323   621 |0.25 0.18 0.49
mysqld     8192B 3832k|  2   1  51  47   0   0|8192B 4192k| 296B 1320B|   0     0 | 306   605 |0.47 0.23 0.51
mysqld     4096B 8756k| 10   1  42  48   0   0|4096B 9060k| 406B 1320B|   0     0 | 380   641 |0.47 0.23 0.51
mysqld     8192B 3168k| 10   1  54  35   0   0|8192B 2828k|6246B   18k|   0     0 | 501   810 |0.47 0.23 0.51
mysqld     4096B  256k|  1   1  73  26   0   0|4096B  428k|2132B 6154B|   0     0 | 230   419 |0.47 0.23 0.51
mysqld     8192B  408k|  1   0  49  51   0   0|8192B  740k| 690B 1352B|   0     0 | 278   565 |0.47 0.23 0.51
mysqld     4096B  296k|  1   0  51  48   0   0|4096B  604k| 562B 1352B|   0     0 | 287   560 |0.59 0.26 0.52
mysqld     8192B  344k|  1   1  50  48   0   0|8192B  688k| 442B 1384B|   0     0 | 341   702 |0.59 0.26 0.52
mysqld     8192B  512k|  2   0  49  49   0   0|8192B  940k| 460B 1352B|   0     0 | 304   606 |0.59 0.26 0.52
mysqld     4096B  724k|  2   1  56  41   0   0|4096B 1168k| 122B 1384B|   0     0 | 286   553 |0.59 0.26 0.52
mysqld     4096B 6052k|  2   0  51  46   0   0|4096B 6424k| 342B 1352B|   0     0 | 273   517 |0.59 0.26 0.52
mysqld     8192B 9728k| 11   1  46  43   0   0|8192B 9348k| 712B 2072B|   0     0 | 326   505 |0.70 0.29 0.52
mysqld        0   100k| 44   1  53   2   0   1|   0   188k| 188k 4183k|   0     0 |1196   912 |0.70 0.29 0.52
mysqld        0   100k| 98   2   0   0   0   0|   0   184k| 292k   12M|   0     0 |2208  1806 |0.70 0.29 0.52
    #+END_SRC

    - 何か毎回初回設定的なinsertをしている
      - mysql> set global long_query_time=1; をした後でslow_query_logを見て判明
      - これってstaticに持ったらだめかな？オンメモリに持たせるのも魅力的．
    #+BEGIN_SRC sql
# Time: 130813 12:35:20
# User@Host: root[root] @ localhost [127.0.0.1]  Id: 18963
# Query_time: 1.590130  Lock_time: 0.003972 Rows_sent: 0  Rows_examined: 0
SET timestamp=1376364920;
INSERT INTO isucon2.stock (`variation_id`, `seat_id`) VALUES ( 1, "00-00"), ...

# Time: 130813 12:35:21
# User@Host: root[root] @ localhost [127.0.0.1]  Id: 18963
# Query_time: 1.254279  Lock_time: 0.005613 Rows_sent: 0  Rows_examined: 0
SET timestamp=1376364921;
INSERT INTO isucon2.stock (`variation_id`, `seat_id`) VALUES ( 2, "00-00"), ...

# Time: 130813 12:35:21
# User@Host: root[root] @ localhost [127.0.0.1]  Id: 18963
# Query_time: 1.254279  Lock_time: 0.005613 Rows_sent: 0  Rows_examined: 0
SET timestamp=1376364921;
INSERT INTO isucon2.stock (`variation_id`, `seat_id`) VALUES ( 3, "00-00"), ...
    #+END_SRC

** stockテーブルをstaticに [失敗]
   - stockテーブルは webapp/config/database/initial_data.sql にて毎回初期化されているが，
     他のどこからもUPDATEされてなさそう
     - 毎回TRUNCATEするのをやめよう
     - *エラー* -> "Starting Check:ticket counts are not initialized correctly"
   - やっぱりUPDATEされていた -> "UPDATE stock SET order_id = 50 WHERE variation_id = 9 AND order_id IS NULL ORDER BY RAND() LIMIT 1;"
     - *MySQLに渡された全クエリを見る* -> slow query log を有効にした状態で "mysql> set global long_query_time=0;"
   - 大部分のシートがinitされた状態のまま．密行列(stockテーブル)で持つのは非常にアホらしい．

** stockテーブルを全部メモリに置く
   - 密行列なので，あまりセンスは良くないが・・・
   - 64 * 64 * 10 = 2^12 * 10 = 40K シート
   - 1シート = 1レコード辺りせいぜい1KBくらいっぽいし，40MBくらい．余裕でメモリに収まる．
   - stockテーブルは元々インデックスもない．
   - スクリプトのhash tableで
     { "seat_id": {他のカラムたち} }
     みたいな情報を持てば良いような気がする．
     - いや，全クエリをさっと見ると，ほぼ全部 variation_id で JOIN されている．
       なので，
       { "variation_id": {他のカラムたち} }
       ってのを持たせるように改造するのが良さそう．

** datadirをtmpfsに
   - ぱっと見るに，JOIN部分をdict使って書きなおすのはそんなに楽じゃない．
     全テーブルの容量とか見ても大したことないし，tmpfsに置いたらそれだけでdisk io相当減るでしょう．

*** スコア
    - *even*
    - 元々ページキャッシュに十分乗ってた・・・??
    #+BEGIN_SRC sh
Score:1507727
Tickets:326
SoldOut:-
SoldOutAt:-
GET:2511
POST:326
Errors:-
Timeouts:-
Update:15:14:33
    #+END_SRC

** クエリキャッシュを有効に
*** スコア
    *up!!*
    #+BEGIN_SRC sh
Score:1216629
Tickets:404
SoldOut:-
SoldOutAt:-
GET:3116
POST:404
Errors:-
Timeouts:-
Update:16:36:42
    #+END_SRC

** nginxをリバースプロキシ & HTTPサーバに
   #+BEGIN_SRC sh
sudo apt-get install nginx

   #+END_SRC

** TODO
   - stockテーブルをなくして，代わりに { "variation_id": {他のカラムたち} } っていうハッシュテーブルをLLレベルで持たせる．
   - slow logチェック
   - my.cnfチェック
